// --- Importa√ß√µes ---
const express = require('express');
const cors = require('cors');
const morgan = require('morgan');
const sequelize = require('./config/database');
const routes = require('./routes/index');

// Importa√ß√£o de todos os models para definir as associa√ß√µes
const Venda = require('./models/Venda');
const VendaItem = require('./models/VendaItem');
const Funcionario = require('./models/Funcionario');
const Produto = require('./models/Produto');

// --- Inicializa√ß√£o do App ---
const app = express();

// --- Middlewares ---
app.use(cors()); // Permite requisi√ß√µes de outros dom√≠nios
app.use(morgan('dev')); // Adiciona logs de requisi√ß√£o no console
app.use(express.json()); // Permite que o express entenda JSON

// --- Defini√ß√£o das Associa√ß√µes entre Models ---
// Rela√ß√£o: Venda <-> Funcion√°rio
Funcionario.hasMany(Venda, { foreignKey: 'funcionario_id' });
Venda.belongsTo(Funcionario, { foreignKey: 'funcionario_id' });

// Rela√ß√£o: Venda <-> VendaItem
Venda.hasMany(VendaItem, { foreignKey: 'venda_id' });
VendaItem.belongsTo(Venda, { foreignKey: 'venda_id' });

// Rela√ß√£o: VendaItem <-> Produto
Produto.hasMany(VendaItem, { foreignKey: 'produto_id' });
VendaItem.belongsTo(Produto, { foreignKey: 'produto_id' });

// --- Rotas da API ---
app.use('/api', routes); // Prefixo '/api' para todas as rotas

// --- Inicializa√ß√£o do Servidor ---
const PORT = process.env.PORT || 3333;

// A l√≥gica de iniciar o servidor s√≥ ser√° executada se o arquivo n√£o for importado por um teste
if (process.env.NODE_ENV !== 'test') {
  sequelize.authenticate()
    .then(() => {
      console.log('‚úÖ Conex√£o com o banco de dados estabelecida com sucesso.');
      app.listen(PORT, () => {
        console.log(`üöÄ Servidor rodando na porta ${PORT}`);
      });
    })
    .catch(err => {
      console.error('‚ùå N√£o foi poss√≠vel conectar ao banco de dados:', err);
    });
}

// Exporta o 'app' para que nossos testes de API possam us√°-lo
module.exports = app;